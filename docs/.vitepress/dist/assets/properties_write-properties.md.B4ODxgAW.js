import{_ as s,c as t,o as a,ae as i}from"./chunks/framework.XMIap9gs.js";const k=JSON.parse('{"title":"Write properties","description":"","frontmatter":{},"headers":[],"relativePath":"properties/write-properties.md","filePath":"properties/write-properties.md"}'),r={name:"properties/write-properties.md"};function n(o,e,p,h,d,l){return a(),t("div",null,e[0]||(e[0]=[i(`<h1 id="write-properties" tabindex="-1">Write properties <a class="header-anchor" href="#write-properties" aria-label="Permalink to &quot;Write properties&quot;">​</a></h1><p>Tests in kiri-check are written within the framework of <code>package:test</code>. Each test consists of two main components. The first is the <code>property</code> function, which sets up the test, and the second is the <code>forAll</code> function, which receives the generated values and executes the test block. The test execution block is encapsulated within <code>forAll</code> and <code>property</code>.</p><p><code>property</code> is a wrapper for <code>test</code> and accepts the same arguments. <code>forAll</code> takes an arbitrary and a block, passing the values generated by the arbitrary to the block&#39;s arguments. The block is executed as many times as values are generated. Within the block, values are verified using the <code>expect</code> function, just like in regular tests.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;generate integers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        forAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (value) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greaterThanOrEqualTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lessThanOrEqualTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span></code></pre></div><p>Using multiple <code>forAll</code> within one <code>property</code>, or nesting <code>forAll</code>, does not guarantee behavior. If you need to use multiple arbitraries or choose arbitraries based on conditions, you should use a composite arbitrary. See <a href="/kiri-check-doc/arbitraries.html#composition">Composition</a> for more details.</p><p>Be aware that neither <code>property</code> nor <code>forAll</code> execute immediately. Processes dependent on the start or end of <code>property</code> or <code>forAll</code> should not be written outside the test block. See <a href="#set-up-and-tear-down">Set up and tear down</a> as well.</p><h2 id="run-tests" tabindex="-1">Run tests <a class="header-anchor" href="#run-tests" aria-label="Permalink to &quot;Run tests&quot;">​</a></h2><p>Tests are run with the <code>dart test</code> command, just like with <code>package:test</code>. If a test fails, shrinking is performed and the smallest found value is displayed as part of the error message.</p><p>If you want to know the generated and shrunk values, specify <code>Verbosity.verbose</code> in <code>KiriCheck.verbosity</code>.</p><h2 id="set-up-and-tear-down" tabindex="-1">Set up and tear down <a class="header-anchor" href="#set-up-and-tear-down" aria-label="Permalink to &quot;Set up and tear down {id=&quot;set-up-and-tear-down&quot;}&quot;">​</a></h2><p>Set up and tear down processes are passed as callbacks in the arguments of <code>forAll</code>. Set up is specified with <code>setUp</code>, and tear down with <code>tearDown</code>.</p><h2 id="integrate-with-package-test" tabindex="-1">Integrate with <code>package:test</code> <a class="header-anchor" href="#integrate-with-package-test" aria-label="Permalink to &quot;Integrate with \`package:test\` {id=&quot;integrate-with-package-test&quot;}&quot;">​</a></h2><p>kiri-check can coexist with <code>package:test</code>. There is no need to alter existing test code using <code>package:test</code>, and the reverse is also true.</p>`,13)]))}const u=s(r,[["render",n]]);export{k as __pageData,u as default};
