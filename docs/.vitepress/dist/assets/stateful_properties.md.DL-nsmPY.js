import{_ as t,c as i,o as s,ae as a}from"./chunks/framework.XMIap9gs.js";const m=JSON.parse('{"title":"Write stateful properties","description":"","frontmatter":{},"headers":[],"relativePath":"stateful/properties.md","filePath":"stateful/properties.md"}'),r={name:"stateful/properties.md"};function o(l,e,n,h,p,d){return s(),i("div",null,e[0]||(e[0]=[a(`<h1 id="write-stateful-properties" tabindex="-1">Write stateful properties <a class="header-anchor" href="#write-stateful-properties" aria-label="Permalink to &quot;Write stateful properties&quot;">​</a></h1><h2 id="import-the-library" tabindex="-1">Import the library <a class="header-anchor" href="#import-the-library" aria-label="Permalink to &quot;Import the library&quot;">​</a></h2><p>To perform stateful testing, in addition to importing <code>kiri_check/kiri_check.dart</code>, you need to import <code>kiri_check/stateful_test.dart</code>.</p><p>Example:</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:kiri_check/kiri_check.dart&#39;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:kiri_check/stateful_test.dart&#39;;</span></span></code></pre></div><h2 id="write-process" tabindex="-1">Write process <a class="header-anchor" href="#write-process" aria-label="Permalink to &quot;Write process&quot;">​</a></h2><p>The stateful testing process is divided into three steps: preparing the model and the real system, defining the <code>Behavior</code> class, and executing it.</p><ol><li><p><strong>Implement the model and the real system</strong></p><p>To perform stateful testing, first prepare the code for the model and the real system. The model serves as a reference for comparison with the real system. There are no specific classes that need to be inherited, so feel free to implement them as you like.</p></li><li><p><strong>Define the Behavior</strong></p><p>Define a <code>Behavior</code> class and specify the test content. Specifically, include the following three elements:</p><ul><li><strong>Generate the model and the real system</strong>: The <code>initialState</code> method generates the abstract model, and the <code>createSystem</code> method generates the real system using that model. These objects represent the initial state of the test.</li><li><strong>Terminate the real system</strong>: Override the <code>destroySystem</code> method to describe the termination process of the real system at the end of the test.</li><li><strong>Define the commands to be executed randomly</strong>: The <code>generateCommands</code> method generates a list of commands that will be executed randomly during the test.</li></ul></li><li><p><strong>Execute the Behavior</strong></p><p>Execute the defined <code>Behavior</code>. Use the <code>runBehavior</code> function to start the test.</p></li></ol><p>For specific examples, refer to the <a href="/kiri-check-doc/stateful/quickstart.html">Quickstart</a>.</p>`,9)]))}const k=t(r,[["render",o]]);export{m as __pageData,k as default};
