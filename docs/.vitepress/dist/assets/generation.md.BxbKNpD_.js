import{_ as a,c as i,o as s,ae as n}from"./chunks/framework.XMIap9gs.js";const g=JSON.parse('{"title":"Generation","description":"","frontmatter":{},"headers":[],"relativePath":"generation.md","filePath":"generation.md"}'),t={name:"generation.md"};function r(o,e,l,h,d,c){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="generation" tabindex="-1">Generation <a class="header-anchor" href="#generation" aria-label="Permalink to &quot;Generation&quot;">​</a></h1><h2 id="generation-policy" tabindex="-1">Generation policy <a class="header-anchor" href="#generation-policy" aria-label="Permalink to &quot;Generation policy&quot;">​</a></h2><p>The <strong>Generation policy (GenerationPolicy)</strong> determines the tendencies in the data generated by arbitraries. Data generation by arbitraries is not purely random; the distribution of data is adjusted to enable more efficient testing. <code>GenerationPolicy</code> can be specified through the <code>generationPolicy</code> in <code>forAll</code>.</p><p>The policies available are as follows:</p><ul><li><strong>GenerationPolicy.auto</strong>: The default behavior, which tries to cover the range of values that can be generated by the arbitrary. Subsequent behavior depends on the implementation of the arbitrary.</li><li><strong>GenerationPolicy.exhaustive</strong>: The arbitrary covers the entire possible range of values it can generate. Refer to the &quot;Exhaustive generation&quot; section for more details.</li><li><strong>GenerationPolicy.random</strong>: Generates completely random data.</li></ul><p>Regardless of the chosen policy, the same set of data is consistently generated at the beginning of each test execution, ensuring the reproducibility of tests.</p><h2 id="generate-edge-cases" tabindex="-1">Generate edge cases <a class="header-anchor" href="#generate-edge-cases" aria-label="Permalink to &quot;Generate edge cases {id=&quot;generate-edge-cases&quot;}&quot;">​</a></h2><p>The generation of edge cases can be explicitly specified. Specify <code>EdgeCasePolicy</code> in the <code>edgeCasePolicy</code> of <code>forAll</code>. The policies available are:</p><ul><li><code>EdgeCasePolicy.none</code>: Does not generate edge cases.</li><li><code>EdgeCasePolicy.mixin</code>: The default behavior. Generates edge cases randomly or at a certain ratio.</li><li><code>EdgeCasePolicy.first</code>: Generates edge cases first.</li></ul><p>Edge cases vary by arbitrary. Generally, minimum values, maximum values, and special values are generated as edge cases.</p><h2 id="generate-enums" tabindex="-1">Generate enums <a class="header-anchor" href="#generate-enums" aria-label="Permalink to &quot;Generate enums {id=&quot;generate-enums&quot;}&quot;">​</a></h2><p>While there is no dedicated arbitrary for <code>Enum</code>, using <a href="/kiri-check-doc/arbitraries.html#constant-from"><code>constantFrom</code></a> allows you to cover enum values.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;enum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      forAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        constantFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.values),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (value) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.values));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><h2 id="exhaustive-generation" tabindex="-1">Exhaustive generation <a class="header-anchor" href="#exhaustive-generation" aria-label="Permalink to &quot;Exhaustive generation {id=&quot;exhaustive-generation&quot;}&quot;">​</a></h2><p>Some arbitraries can cover all possible values they are capable of generating. To generate all values, specify <code>GenerationPolicy.exhaustive</code>. When this policy is set, the arbitrary prioritizes the generation of all possible values.</p><p>Specifying this policy with arbitraries that do not support exhaustive generation will result in an error.</p><h2 id="consistent-generation" tabindex="-1">Consistent generation <a class="header-anchor" href="#consistent-generation" aria-label="Permalink to &quot;Consistent generation&quot;">​</a></h2><p>To always generate the same data, fix the random seed. Refer also to <a href="/kiri-check-doc/properties/configure-tests.html#fix-random-seed">Fix random seed</a>.</p>`,18)]))}const k=a(t,[["render",r]]);export{g as __pageData,k as default};
