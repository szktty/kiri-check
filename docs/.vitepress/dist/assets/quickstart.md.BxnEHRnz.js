import{_ as a,c as t,o as s,ae as i}from"./chunks/framework.XMIap9gs.js";const k=JSON.parse('{"title":"Quickstart","description":"","frontmatter":{},"headers":[],"relativePath":"quickstart.md","filePath":"quickstart.md"}'),r={name:"quickstart.md"};function n(l,e,p,h,o,d){return s(),t("div",null,e[0]||(e[0]=[i(`<h1 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-label="Permalink to &quot;Quickstart&quot;">​</a></h1><h2 id="set-up" tabindex="-1">Set up <a class="header-anchor" href="#set-up" aria-label="Permalink to &quot;Set up&quot;">​</a></h2><h3 id="create-a-new-project" tabindex="-1">Create a new project <a class="header-anchor" href="#create-a-new-project" aria-label="Permalink to &quot;Create a new project&quot;">​</a></h3><p>There is no need for a special project structure to introduce kiri-check. Simply create a regular project using the <code>dart</code> command (or <code>flutter</code> command).</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kiri_check_quickstart</span></span></code></pre></div><h3 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h3><p>Install the library from <a href="https://pub.dev/packages/kiri_check" target="_blank" rel="noreferrer">pub.dev</a> using the following command:</p><p>With Dart:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:kiri_check</span></span></code></pre></div><p>With Flutter:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:kiri_check</span></span></code></pre></div><p>Alternatively, add the library to your <code>pubspec.yaml</code> and run <code>dart pub get</code> or <code>flutter pub get</code>.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dev_dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kiri_check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">^1.2.0</span></span></code></pre></div><h2 id="write-a-simple-property" tabindex="-1">Write a simple property <a class="header-anchor" href="#write-a-simple-property" aria-label="Permalink to &quot;Write a simple property&quot;">​</a></h2><p>Writing a property is straightforward. kiri-check is integrated with <code>package:test</code> and can be used alongside it. There is no need to change existing unit test code; you can simply add properties.</p><p>Let’s write a very simple property. Create a file named <code>simple_test.dart</code> in the <code>test</code> directory and add the following code:</p><p><code>simple_test.dart</code>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;generate integer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  forAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), (value) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, isA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>This property uses the <code>integer</code> arbitrary to generate a random integer and verifies that the integer is of type <code>int</code>. This property will always succeed (provided there are no bugs in kiri-check).</p><p>Properties are defined with the <code>property</code> function. <code>property</code> accepts the same arguments as the <code>test</code> function from <code>package:test</code>. The <code>forAll</code> function used within the block passed to <code>property</code> takes an arbitrary that generates random values and a block that receives these values. In that block, you can verify the values using the <code>expect</code> function from unit tests.</p><h2 id="run-the-test" tabindex="-1">Run the test <a class="header-anchor" href="#run-the-test" aria-label="Permalink to &quot;Run the test&quot;">​</a></h2><p>Running the test is the same as with <code>package:test</code>. Execute it with the <code>dart test</code> command.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><p>If a property fails, shrinking will occur to display the smallest value that causes the error.</p><h2 id="where-to-next" tabindex="-1">Where to next? <a class="header-anchor" href="#where-to-next" aria-label="Permalink to &quot;Where to next?&quot;">​</a></h2><p>Whether you are familiar with property-based testing or not, it&#39;s a good idea to look through the list of arbitraries to get to know the main ones. If you&#39;re new to property-based testing, reading a book on the subject is also a good idea. Though it&#39;s intended for Erlang and Elixir, I recommend <a href="https://pragprog.com/titles/fhproper/property-based-testing-with-proper-erlang-and-elixir/" target="_blank" rel="noreferrer">Property-Based Testing with PropEr, Erlang, and Elixir: Find Bugs Before Your Users Do</a> (<a href="https://www.lambdanote.com/collections/proper-erlang-elixir" target="_blank" rel="noreferrer">Japanese translation</a>).</p>`,26)]))}const g=a(r,[["render",n]]);export{k as __pageData,g as default};
